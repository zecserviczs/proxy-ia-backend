version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: proxi-ia-postgres
    environment:
      POSTGRES_DB: proxi_ia_db
      POSTGRES_USER: proxi_ia_user
      POSTGRES_PASSWORD: proxi_ia_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/db/data.sql:/docker-entrypoint-initdb.d/01-data.sql
      - ./src/main/resources/db/migration/V1__Create_initial_schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    networks:
      - proxi-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxi_ia_user -d proxi_ia_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Spring Boot
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxi-ia-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/proxi_ia_db
      SPRING_DATASOURCE_USERNAME: proxi_ia_user
      SPRING_DATASOURCE_PASSWORD: proxi_ia_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
      SERVER_PORT: 8080
      JAVA_OPTS: -Xmx512m -Xms256m
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - proxi-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin (interface web pour PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: proxi-ia-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@proxi-ia.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - proxi-ia-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Redis (pour le cache et les sessions)
  redis:
    image: redis:7-alpine
    container_name: proxi-ia-redis
    ports:
      - "6379:6379"
    networks:
      - proxi-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  proxi-ia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Scripts utiles
# Pour démarrer: docker-compose up -d
# Pour arrêter: docker-compose down
# Pour voir les logs: docker-compose logs -f backend
# Pour reconstruire: docker-compose up -d --build
